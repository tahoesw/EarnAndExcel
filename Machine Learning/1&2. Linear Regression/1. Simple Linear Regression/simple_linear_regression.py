# -*- coding: utf-8 -*-
"""Simple Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1F7lyha4om8ggEXlffRDFCk0aTxa2FoJb
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn import linear_model

iris = load_iris()
data1 = pd.DataFrame(data=np.c_[iris["data"], iris["target"]],
                     columns=iris["feature_names"] + ["target"])

#data1

"""
X = independent (input) variable

y = dependent (output) variable

[[]] - maintain as df; [] - create series
"""

X = data1[['petal length (cm)']]
#X

y = data1['petal width (cm)']
#y

# Step 1: define model
lm = linear_model.LinearRegression()

# Step 2: fit X to Y
lm.fit(X, y)

print("coeff = ", lm.coef_, "intercept = ", lm.intercept_)

# This is equivalent to what ML model is giving
def model(X):
  return 0.41575542 * (X) - 0.3630755213190291

for i in [2.2, 3.3, 4.4, 5.5]:
  print(i, model(i))

# 'Nudder one
X2 = data1[['petal width (cm)']]
y2 = data1['sepal length (cm)']

lm.fit(X2, y2)

# Equation
print ("sepal length (cm) =", round(lm.coef_[0], 3), "* petal width (cm)  + ", round(lm.intercept_, 3))

print("coefficient of determination =", lm.score(X2, y2))