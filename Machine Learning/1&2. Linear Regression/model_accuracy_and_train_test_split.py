# -*- coding: utf-8 -*-
"""Model Accuracy and Train Test Split.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pa6nPG13LXfFoZa_lYD2U_syil1D5T_l
"""

import numpy as np
import pandas as pd
from sklearn.datasets import load_iris
from sklearn import linear_model
from sklearn.model_selection import train_test_split

iris = load_iris()
data1 = pd.DataFrame(data=np.c_[iris["data"], iris["target"]],
                     columns=iris["feature_names"] + ["target"])

data1

"""X = independent (input) variable

Y = dependent (output) variable

[[]] - maintain as df; [] - create series
"""

# Select first 3 cols ('sepal length (cm)', 'sepal width (cm)', 'petal length (cm)')
X_cols = list(data1.columns[0:3])

# Inputs (independent vars) - in df format
X = data1[X_cols]
X

# Output (dependent var) - in series format
y = data1['petal width (cm)']
y

# Step 1: define model type
model = linear_model.LinearRegression()

# Step 2: fit X to y
model.fit(X, y)

print("coeff(sepal length (cm)) = ", model.coef_[0],
      "\ncoeff(sepal width (cm)) = ", model.coef_[1],
      "\ncoeff(petal length (cm)) = ", model.coef_[2],
      "\nintercept = ", model.intercept_)

"""**Equation:** petal width = -0.207 * sepal length + 0.223 * sepal width + 0.524 * petal length - 0.24"""

# This function is equivalent to what ML model is giving
def my_model(X):
  return -0.207 * (X[0]) + 0.223 * (X[1]) + 0.524 * (X[2]) - 0.24

model_inputs = [[2.2, 3.3, 4.4], [5.5, 2.2, 3.3], [4.4, 5.5, 2.2], [3.3, 4.4, 5.5]]
for i in model_inputs:
  print(i, my_model(i))

"""**.Predict**"""

# Does same as my_model
for i in model_inputs:
  print(i, model.predict(np.array([i])))

# Linear Reg can give squirrely results:
print(model.predict([[5, 2, 1]]))

"""**Model Score**"""

print("coefficient of determination =", model.score(X, y))

"""**Train/Test split**

Problem: model is accurate in predicting values we've already trained on

Need to split data to check accuracy on values we haven't seen before
"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

model.fit(X_train, y_train)

print("Score on data used in training =", model.score(X_train, y_train))

print("Score on data left out =", model.score(X_test, y_test))