# -*- coding: utf-8 -*-
"""2. Stepwise Selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QCPoY-zfv9TJbhL6VykJdp5f4VR0pSHj
"""

#!pip uninstall mlxtend
#!pip install mlxtend==0.19
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import sklearn.model_selection as ms
from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingClassifier, GradientBoostingRegressor, RandomForestRegressor, RandomForestClassifier
from sklearn.metrics import roc_auc_score
from datetime import datetime
from sklearn.datasets import load_iris
import joblib
import sys
sys.modules['sklearn.externals.joblib'] = joblib
import mlxtend
from mlxtend.feature_selection import SequentialFeatureSelector as SFS
from mlxtend.feature_selection import ExhaustiveFeatureSelector as EFS
from mlxtend.plotting import plot_sequential_feature_selection as plot_sfs
import warnings
warnings.filterwarnings("ignore")

print(mlxtend.__version__)

"""**Read and clean data**"""

iris = load_iris()
df = pd.DataFrame(data=np.c_[iris["data"], iris["target"]],
                     columns=iris["feature_names"] + ["target"])

# Inputs: sepal length (cm),	sepal width (cm),	petal length (cm)
X = df[df.columns[0:3]]

# Output (dependent var) - in series format
y = df['petal width (cm)']

"""**Split into train/test** """

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""**Step forward**"""

sfs = SFS(RandomForestRegressor(n_estimators=100, random_state=0, n_jobs=-1),
          k_features=(1, len(X_train.columns)),
          forward=True,
          floating=False,
          verbose=2,
          cv=4,
          scoring="r2",
          n_jobs=-1).fit(X_train, y_train)

print(sfs.k_feature_names_, sfs.k_feature_idx_, sfs.k_score_)
pd.set_option('max_colwidth', 800)
pd.DataFrame.from_dict(sfs.get_metric_dict()).T

"""**Step backward**"""

sfs = SFS(RandomForestRegressor(n_estimators=100, random_state=0, n_jobs=-1),
          k_features=(1, len(X_train.columns)),
          forward=False,
          floating=False,
          verbose=2,
          cv=4,
          scoring="r2",
          n_jobs=-1).fit(X_train, y_train)

print(sfs.k_feature_names_, sfs.k_feature_idx_, sfs.k_score_)
#pd.set_option('max_colwidth', 800)
pd.DataFrame.from_dict(sfs.get_metric_dict()).T

"""**Exhaustive**"""

#WARNING: Can run REALLY long
print(str(datetime.now()))
efs = EFS(RandomForestRegressor(n_estimators=100, random_state=0, n_jobs=-1),
          min_features=1,
          max_features=len(X_train.columns),
#          verbose=2,
          cv=4,
          scoring="r2",
          n_jobs=-1).fit(X_train, y_train)
print('\n', str(datetime.now()))

print(efs.best_feature_names_, efs.best_idx_, efs.best_score_)
#pd.set_option('max_colwidth', 800)
pd.DataFrame.from_dict(efs.get_metric_dict()).T

plot_sfs(sfs.get_metric_dict(), kind = "std_dev")

plot_sfs(efs.get_metric_dict(), kind = "std_dev")