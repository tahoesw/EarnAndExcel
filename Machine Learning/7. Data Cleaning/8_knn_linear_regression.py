# -*- coding: utf-8 -*-
"""8. KNN Linear Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ugEq7NWqXO3hGB_o2OxA_todyx3fTTGL
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn import linear_model
from sklearn.neighbors import KNeighborsClassifier
import math
import warnings
warnings.filterwarnings("ignore")
pd.set_option("display.max_rows", 10)

"""**Read data**"""

# Uploaded from C:\Users\wel51x\Box\MyBox\Data\Housing Data
df = pd.read_csv("train.csv")
#df

print(df.BsmtExposure.value_counts())
print("Number of missing BsmtExposure values:", df.isna().sum().BsmtExposure)
# [0 if df.KitchenQual[i] == "Fa" else 1 if df.KitchenQual[i] == "TA" else 2 if df.KitchenQual[i] == "Gd" else 3 for i in range(len(df))]
# sns.barplot(data=df, x="BsmtExposure", y="SalePrice")

#get rows with missing BsmtExposure values
srs = df.BsmtExposure.isna()
missing = srs[srs].index

# split into missing and present dfs
missingdf = pd.DataFrame(df.iloc[[i for i in missing],])
presentdf = pd.DataFrame(df.iloc[[i for i in range(len(df)) if i not in missing],])

# set model & init k value to sqrt(len(df)
classifier = KNeighborsClassifier(int(math.sqrt(len(df))), weights="distance")

# fit model
trained_model = classifier.fit(presentdf[["SalePrice"]], presentdf[["BsmtExposure"]])

# impute missing BsmtExposure values based on neighbors' Sale Prices
imputed_values = trained_model.predict(missingdf[["SalePrice"]])

# plug these back in to missing
missingdf.BsmtExposure = list(imputed_values)

# recreate df
df = presentdf.append(missingdf)
df.sort_values(by="Id", inplace=True)

print(df.BsmtExposure.value_counts())
sns.barplot(data=df, x="BsmtExposure", y="SalePrice")

"""**Clean and encode**"""

#df = df[["BsmtExposure", "SalePrice"]]
#df

X = pd.DataFrame()
# Transform BsmtExposure No, Mn, Av, rest(Gd) to 0, 1, 2, 3
X["BsmtExposure"] = [0 if df.BsmtExposure[i] == "No" else 1 if df.BsmtExposure[i] == "Mn" else 2 if df.BsmtExposure[i] == "Av" else 3 for i in range(len(df))]

y = df.SalePrice
#print(X.BsmtExposure.value_counts())
#X

"""**Define model type and fit**"""

# Step 1: define model
lm = linear_model.LinearRegression()

# Step 2: fit X to Y
lm.fit(X, y)

"""**Results**"""

print("coeff = ", lm.coef_, "intercept = ", lm.intercept_)

BsmtExposure = ["No", "Mn", "Av", "Gd"]
for i in range(4):
  print("For Basement Exposure =", BsmtExposure[i], "==> Sale Price prediction is", int(np.round(lm.predict([[i]]))))